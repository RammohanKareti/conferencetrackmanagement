using ConferenceManagement.Interfaces;
using ConferenceManagement.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Web;

namespace ConferenceManagement.Services
{
    public class ConferenceInputDataParser 
    {
        private readonly ILineParser _lineParser;

        public ConferenceInputDataParser(ILineParser lineParser)
        {
            _lineParser = lineParser;
        }

        /// <summary>
        /// Entry point for reading file
        /// </summary>
        /// <param name="inputFile"></param>
        /// <returns></returns>
        public async Task<List<SessionTalk>> LoadTalks(HttpPostedFileBase inputFile)
        {
            var allLines = new List<string>();
            // set the positon to the start in case...
            inputFile.InputStream.Position = 0;
            using (var streamReader = new StreamReader(inputFile.InputStream))
            {
                while (streamReader.Peek() >= 0)
                {
                    var line = await streamReader.ReadLineAsync();
                    if (!string.IsNullOrWhiteSpace(line))
                    {
                        allLines.Add(line);
                    }
                }
            }

            if (allLines.Count == 0)
            {
                return null;
            }
            return ParseLines(allLines);
        }

        /// <summary>
        /// Parse lines that are generated by just reading above
        /// </summary>
        /// <param name="lines"></param>
        /// <returns></returns>
        private List<SessionTalk> ParseLines(List<string> lines)
        {
            var validTalks = new List<SessionTalk>();
            foreach (var line in lines)
            {
                // Never trust the user, they are evil
                if (_lineParser.TryParse(line, out SessionTalk talk))
                {
                    validTalks.Add(talk);
                }
            }
            return validTalks;
        }

        public List<ConferenceTrack> GetTracks(List<SessionTalk> registeredTalks)
        {
            var totalMinutes = registeredTalks.Sum(s => s.Duration.TotalMinutes);
            if (totalMinutes <= 0)
            {
                return null;
            }

            var perDayAvailableMinutes = SessionConstraints.TotalAvailableMinutes;
            var requiredNumberOfTracks = totalMinutes / perDayAvailableMinutes;
            var tracks = new List<ConferenceTrack>();

            for (var i = 0; i < requiredNumberOfTracks; i++)
            {
                var sessionTimings = GetSessionTimings();
                tracks.Add(new ConferenceTrack(sessionTimings, i+1));
            }
            return tracks;
        }

        private SessionTimings GetSessionTimings()
        {
            var startHour = TimeSpan.FromHours(SessionConstraints.StartHour);
            var lunchStartHour = TimeSpan.FromHours(SessionConstraints.LunchStartHour);
            var lunchEndHour = TimeSpan.FromHours(SessionConstraints.LunchEndHour);
            var networkStartHour = TimeSpan.FromHours(SessionConstraints.MinNetworkStartHour);
            var networkEndHour = TimeSpan.FromHours(SessionConstraints.MaxNetworkStartHour);
            var timings = new SessionTimings
            {
                MorningSessionSlot = new Slot(startHour, lunchStartHour),
                AfternoonSessionSlot = new Slot(lunchEndHour, networkEndHour),
                LunchBreakSlot = new Slot(lunchStartHour, lunchEndHour),
                NetworkingEventStartTimeSlot = new Slot(networkStartHour, networkEndHour)
            };
            return timings;
        }
    }
}