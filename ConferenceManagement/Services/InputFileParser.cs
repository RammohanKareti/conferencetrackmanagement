using ConferenceManagement.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;

namespace ConferenceManagement.Services
{
    /// <summary>
    /// File parser
    /// </summary>
    public class InputFileParser
    {
        // Some bla bla configurations
        // To Do load them as configuration
        private const string MinLiteralStringToken = "min";
        private const string LightningTalkToken = "lightning";
        private const int LightningTalkMinutes = 5;

        /// <summary>
        /// Entry point for reading file
        /// </summary>
        /// <param name="inputFile"></param>
        /// <returns></returns>
        public async Task<List<SessionTalk>> ParseInputFile(HttpPostedFileBase inputFile)
        {
            var allLines = new List<string>();
            // set the positon to the start in case...
            inputFile.InputStream.Position = 0;
            using (var streamReader = new StreamReader(inputFile.InputStream))
            {
                while (streamReader.Peek() >= 0) 
                {
                    var line = await streamReader.ReadLineAsync();
                    if (!string.IsNullOrWhiteSpace(line))
                    {
                        allLines.Add(line);
                    }
                }
            }

            if (allLines.Count == 0)
            {
                return null;
            }
            return ParseLines(allLines);
        }

        /// <summary>
        /// Parse lines that are generated by just reading above
        /// </summary>
        /// <param name="lines"></param>
        /// <returns></returns>
        private List<SessionTalk> ParseLines(List<string> lines)
        {
            var validTalks = new List<SessionTalk>();
            foreach (var line in lines)
            {
                // Never trust the user, they are evil
                if (IsValidLine(line, out SessionTalk talk))
                {
                    validTalks.Add(talk);
                }
            }
            return validTalks;
        }

        /// <summary>
        /// Evil data checker 
        /// </summary>
        /// <param name="line"></param>
        /// <param name="talk"></param>
        /// <returns></returns>
        private bool IsValidLine(string line, out SessionTalk talk)
        {
            talk = null;
            if (string.IsNullOrWhiteSpace(line))
            {
                return false;
            }

            var parsedLine = ParseLine(line); // Parsing magic here

            // Looks like lighting but not quite right
            if (parsedLine.IsLightning 
                && !string.Equals(parsedLine.Value,
                    LightningTalkToken, StringComparison.InvariantCultureIgnoreCase))
            {
                // evil
                return false;
            }
            int minutes = 0;

            // Number in another galaxy ?
            if (!parsedLine.IsLightning && 
                !int.TryParse(parsedLine.Value, out minutes)) // invalid number
            {
                //evil
                return false;
            }

            talk = MapParsedTalkToSessionTalk(parsedLine, minutes);
            return true; // Yay
        }

        // Helper method
        private SessionTalk MapParsedTalkToSessionTalk(ParsedLine parsedLine,
            int minutes)
        {
            return new SessionTalk
            {
                Minutes = parsedLine.IsLightning ? LightningTalkMinutes : minutes,
                TalkName = parsedLine.Name,
            };
        }

        /// <summary>
        /// Parsing the Line (No magic)
        /// </summary>
        /// <param name="line"></param>
        /// <returns></returns>
        private ParsedLine ParseLine(string line)
        {
            var parsedString = new ParsedLine();
            var lineLength = line.Length;
            // read last three characters
            var lastThreeCharcters = line.Substring(lineLength - MinLiteralStringToken.Length);
            var builder = new StringBuilder();
            // Must be Lightning talk
            if (!string.Equals(lastThreeCharcters, MinLiteralStringToken)) 
            {
                parsedString.IsLightning = true;
                builder.Insert(0, lastThreeCharcters);
            }

            // It does not matter parse through till the start get clear picture
            var pos = MinLiteralStringToken.Length + 1;
            var currIndex = lineLength - pos;
            while (currIndex >= 0)
            {
                var currChar = line[lineLength - pos];
                if (currChar == ' ') // break when you find space ;)
                {
                    break;
                }
                builder.Insert(0, currChar);
                pos++;
                currIndex = lineLength - pos;
            }
            parsedString.Value = builder.ToString();
            // Evil data check 
            parsedString.Name =  line.Substring(0, currIndex >= 0 ? currIndex : 0);
            return parsedString; ;
        }
    }
}